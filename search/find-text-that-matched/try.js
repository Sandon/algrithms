const http = require('http')
const fs = require('fs')
const testSuitePerf = require('./testSuite/perf')
const testSuiteRight = require('./testSuite/right')

let content = fs.readFileSync('./question/dataSet.txt', 'utf-8')
//let content = fs.readFileSync('./querykey/dataset.txt', 'utf-8')
let testQuery = '忧思在我的心里平静下去，正如黄昏在寂静的林中。，请问大买家要如何收费？' +
  '静静地听，我的心呀，听那“世界”的低语，这是他对你的爱的表示呀，如何开通商品？我们，萧萧的树叶，都有声响回答那暴风雨' +
  '上帝希望我们酬答他的，在于他送给我们的花朵，而不在于太阳和土地。，有没有无缝管上海到他们前面去。，有没有鞍钢' +
  '你在料理家事的时候'
testQuery = '平XX静'
testQuery = '长城嬴氏设防胡，烝沙筑冤垒。蒙公取勋名，岂算生民死。运畚力不禁，永续盘存法碎身砂碛里电解槽上部结。黔黎欲半空主井临时井颈，电路交换域长城舂好多惊喜未已。皇平衡压力天潜鼓怒，力化一女子。遂使万雉崩，不尽'














/*** matchLoopQuery ***/
let data = {keyMap: {subs: {}}}
content.split('\n').forEach((line, index) => {
  line.trim().split('|').slice(1).forEach(keyword => {
    keyword = keyword.toLowerCase()
    const keywordLen = keyword.length
    
    // keyMap
    let keyObj = data.keyMap
    const guard = keywordLen + 1
    for (let i = 1; i !== guard; i++) {
      const key = keyword.slice(0, i)
      if (!keyObj.subs[key]) {
        keyObj.subs[key] = {
          lines: [],
          subs: {}
        }
      }
        
      keyObj = keyObj.subs[key]
    }
    keyObj.lines.push(index + 1)
  })
})
console.log((new Buffer(JSON.stringify(data), 'utf-8')).length)
function matchLoopQuery(query, data) {
  query = query.toLowerCase()
  const len = query.length
  let res = []
  
  const keyMap = data.keyMap
  
  for (let i = 0; i !== len; i++) {
    let subs = keyMap.subs
    let guard = i + 7
    const lenGuard = len + 1
    guard = guard < lenGuard ? guard : lenGuard
    for (let j = i + 1; j !== guard; j++) {
      let keyObj = subs[query.slice(i, j)]
      if (!keyObj) {
        break
      }
      keyObj.lines.length && (res = res.concat(keyObj.lines))
      subs = keyObj.subs
    }
  }
  
  
  res = res.sort((a, b) => a - b)
  res = deDuplicate(res)
  
  // return res.length ? res.join(',') : 0
  return res.length && res.join(',')
}

//testSuitePerf(matchLoopQuery, data)
//testSuitePerf(matchLoopQuery2, data)
console.time('matchLoopQuery')
result = matchLoopQuery(testQuery, data)
console.timeEnd('matchLoopQuery')
console.log(result)
//console.log(result === '2190,5642,6571,12662,14729,15442,16089,18196,18693,19185,19302,20543,21274,21472,24282,28672,29292,29574,30450,30562,31018,31145,31521,32396,32745,33269,33457,34846,37256,38225,39857,44468,46537,49439,52092,53311,56117,56893,57009,59611,61687,62932,63231,63773,65190,65856,66422,69583,70128,70893,71716,72181,76024,76691,80476,83531,86098,86636,88132,93162,93801,95292,95656,95903,96487,96536,96616,97573,98448,102306,103202,103616,103854,106643,107771,109084,111245,111291,112866,112987,113481,113993,114326,115354,116982,120083,120871,124167,125664,125985,126247,127311,127846,131536,134052,136086,136973,137043,139953,142884,144075,145254,146186,149383,150246,150397,151841,152264,152292,153000,156643,157080,160782,161206,161523,167097,168136,168477,169866,173842,174543,174582,175226,175383,178861,180386,182134,184361,184931,185651,186553,188685,188831,191337,194920,195601,197242,197595,201603,202713,203286,205118,208765,208774,210294,210919,211059,213945,215324,217281,218253,218416,219494,222359,223219,226329,227526,227581,228643,229762,230804,230939,232054,232863,234550,236460,239090,239629,242048,243339,243800,244382,244437,245306,245459,246061,248181,248979,250541,252144,256897,257038,260328,260842,260905,263905,264969,265823,268329,272990,273211,273462,275094,275536,275680,276674,277587,280765,281478,281515,281589,284235,285918,287075,287091,287268,288180,288439,288519,288550,292345,292513,292688,293426,294717,296827,297957,301448,302273,303622,304037,304545,307502,308412,308893,312283,313815,316405,317437,317886,318769,320671,320765,321298,324423,325966,325974,326042,326122,326384,328126,328601,332626,333217,333402,333677,333898,334226,335253,338805,339109,339240,339589,340903,340921,341903,342314,342522,342746,343347,343696,344247,344765,344853,346216,347795,351252,353349,355299,355948,357718,358333,358846,359080,359738,359797,360300,360762,361038,362377,364457,364728,366605,371000,372591,374094,374615,375241,375912,376087,376730,378760,379345,379485,380519,383226,385859,387313,387865,387885,389804,390225,393079,395525,395746,396666,397036,397060,397154,397670,398545,398715,399680,405549,407366,407745,408508,413121,414622,416712,417212,417655,419280,421230,421285,424833,425630,428271,430545,431295,433419,433438,434157,434376,435702,436670,438732,439844,441573,442461,444356,446515,447101,448151,448657,454888,456470,456835,458509,460642,462053,464473,464686,464709,465067,466540,473694,473915,474582,477919,479995,482293,485003,492267,494408,494663,496801,497364')
/*console.time('matchLoopQuery2')
result1 = matchLoopQuery2(testQuery, data)
console.timeEnd('matchLoopQuery2')*/
//console.log(result1 === '2190,5642,6571,12662,14729,15442,16089,18196,18693,19185,19302,20543,21274,21472,24282,28672,29292,29574,30450,30562,31018,31145,31521,32396,32745,33269,33457,34846,37256,38225,39857,44468,46537,49439,52092,53311,56117,56893,57009,59611,61687,62932,63231,63773,65190,65856,66422,69583,70128,70893,71716,72181,76024,76691,80476,83531,86098,86636,88132,93162,93801,95292,95656,95903,96487,96536,96616,97573,98448,102306,103202,103616,103854,106643,107771,109084,111245,111291,112866,112987,113481,113993,114326,115354,116982,120083,120871,124167,125664,125985,126247,127311,127846,131536,134052,136086,136973,137043,139953,142884,144075,145254,146186,149383,150246,150397,151841,152264,152292,153000,156643,157080,160782,161206,161523,167097,168136,168477,169866,173842,174543,174582,175226,175383,178861,180386,182134,184361,184931,185651,186553,188685,188831,191337,194920,195601,197242,197595,201603,202713,203286,205118,208765,208774,210294,210919,211059,213945,215324,217281,218253,218416,219494,222359,223219,226329,227526,227581,228643,229762,230804,230939,232054,232863,234550,236460,239090,239629,242048,243339,243800,244382,244437,245306,245459,246061,248181,248979,250541,252144,256897,257038,260328,260842,260905,263905,264969,265823,268329,272990,273211,273462,275094,275536,275680,276674,277587,280765,281478,281515,281589,284235,285918,287075,287091,287268,288180,288439,288519,288550,292345,292513,292688,293426,294717,296827,297957,301448,302273,303622,304037,304545,307502,308412,308893,312283,313815,316405,317437,317886,318769,320671,320765,321298,324423,325966,325974,326042,326122,326384,328126,328601,332626,333217,333402,333677,333898,334226,335253,338805,339109,339240,339589,340903,340921,341903,342314,342522,342746,343347,343696,344247,344765,344853,346216,347795,351252,353349,355299,355948,357718,358333,358846,359080,359738,359797,360300,360762,361038,362377,364457,364728,366605,371000,372591,374094,374615,375241,375912,376087,376730,378760,379345,379485,380519,383226,385859,387313,387865,387885,389804,390225,393079,395525,395746,396666,397036,397060,397154,397670,398545,398715,399680,405549,407366,407745,408508,413121,414622,416712,417212,417655,419280,421230,421285,424833,425630,428271,430545,431295,433419,433438,434157,434376,435702,436670,438732,439844,441573,442461,444356,446515,447101,448151,448657,454888,456470,456835,458509,460642,462053,464473,464686,464709,465067,466540,473694,473915,474582,477919,479995,482293,485003,492267,494408,494663,496801,497364')

/*result1 = testSuiteRight(function (query) {
  return matchLoopQuery(query, data)
})
console.log(result1)*/
/*** matchLoopQuery ***/















/*http.createServer(function (request, response) {
  // 下面这段对于favicon的处理，在最终提交是可以去掉，因为最终是通过工具访问接口，不会产生favicon
  const url = request.url
  if ('/favicon.ico' === url) {
    return
  }
  
  let query = request.url.slice(28)
  // query 变量就是查询的问题串
  // todo real process
  let res = matchLoopQuery(query, data)
  console.log(res)
  response.writeHead(200, {"Content-Type": "text/plain"})
  response.end('hello')
}).listen(8080)*/





function deDuplicate (arr) {
  const len = arr.length
  if (len < 2)
    return arr
  let res = [arr[0]]
  
  for (let i = 1; i !== len; i++) {
    if (arr[i] !== arr[i - 1]) {
      res.push(arr[i])
    }
  }
  
  return res
}
